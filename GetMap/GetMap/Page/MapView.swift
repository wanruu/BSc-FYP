/* MARK: display map */

import Foundation
import SwiftUI
import CoreLocation

struct MapView: View {
    @ObservedObject var locationGetter: LocationGetterModel
    @State var rawPaths: FetchedResults<RawPath>
    @Binding var locations: [Location]
    /* display control */
    @Binding var showCurrentLocation: Bool
    @Binding var showRawPaths: Bool
    @Binding var showLocations: Bool
    @Binding var showClusters: Bool
    @Binding var showRepresentPaths: Bool
    
    @Binding var offset: Offset
    @Binding var scale: CGFloat
    
    /* generated by algorithm */
    @Binding var pathUnits: [PathUnit]
    @Binding var representPaths: [[CLLocation]]

    
    var body: some View {
        ZStack(alignment: .bottom) {
            /* user paths */
            UserPathsView(locationGetter: locationGetter, offset: $offset, scale: $scale)
            
            /* existing raw path */
            showRawPaths ?
                ForEach(rawPaths) { rawPath in
                    RawPathView(locations: rawPath.locations, locationGetter: locationGetter, offset: $offset, scale: $scale)
                } : nil
            
            /* existing path Units: after cluster */
            showClusters ?
                ForEach(pathUnits) { pathUnit in
                    pathUnit.clusterId == -1 ? nil : ClusteredPathView(pathUnit: pathUnit, locationGetter: locationGetter, offset: $offset, scale: $scale, color: colors[pathUnit.clusterId % colors.count])
                } : nil
            /* Representative path */
            showRepresentPaths ?
                RepresentPathsView(representPaths: representPaths, locationGetter: locationGetter, offset: $offset, scale: $scale) : nil
            
            /* current location point */
            showCurrentLocation ?
                UserPoint(locationGetter: locationGetter, offset: $offset, scale: $scale) : nil
            
            /* location point */
            showLocations ?
                ForEach(0..<locations.count) { i in
                    LocationPoint(location: locations[i], locationGetter: locationGetter, offset: $offset, scale: $scale)
                } : nil
        }
    }
}
